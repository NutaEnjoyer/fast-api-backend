"""Add users table and refactor fields in tasks

Revision ID: 72d5be84b49b
Revises:
Create Date: 2025-05-21 17:06:32.744264

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "72d5be84b49b"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("tasks", "user_id", existing_type=sa.VARCHAR(), nullable=False)
    op.create_foreign_key(None, "tasks", "users", ["user_id"], ["id"])
    op.add_column("users", sa.Column("email", sa.String(length=255), nullable=False))
    op.add_column("users", sa.Column("password", sa.String(length=255), nullable=False))
    op.add_column("users", sa.Column("name", sa.String(), nullable=True))
    op.add_column("users", sa.Column("work_interval", sa.Integer(), nullable=True))
    op.add_column("users", sa.Column("break_interval", sa.Integer(), nullable=True))
    op.add_column("users", sa.Column("interval_count", sa.Integer(), nullable=True))
    op.create_unique_constraint(None, "users", ["email"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "users", type_="unique")
    op.drop_column("users", "interval_count")
    op.drop_column("users", "break_interval")
    op.drop_column("users", "work_interval")
    op.drop_column("users", "name")
    op.drop_column("users", "password")
    op.drop_column("users", "email")
    op.drop_constraint(None, "tasks", type_="foreignkey")
    op.alter_column("tasks", "user_id", existing_type=sa.VARCHAR(), nullable=True)
    # ### end Alembic commands ###
